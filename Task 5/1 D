//На шахматной доске стоят слоны и ладьи, необходимо посчитать, сколько клеток не бьется ни одной из фигур.
//
//Шахматная доска имеет размеры 8 на 8. Ладья бьет все клетки горизонтали и вертикали, проходящих через клетку, где она стоит, до первой встретившейся фигуры. Слон бьет все клетки обеих диагоналей, проходящих через клетку, где он стоит, до первой встретившейся фигуры.
//
//Формат ввода
//В первых восьми строках ввода описывается шахматная доска. Первые восемь символов каждой из этих строк описывают состояние соответствующей горизонтали: символ B (заглавная латинская буква) означает, что в клетке стоит слон, символ R — ладья, символ * — что клетка пуста. После описания горизонтали в строке могут идти пробелы, однако длина каждой строки не превышает 250 символов. После описания доски в файле могут быть пустые строки.

#include <iostream>

int main()
{
    
    char CHESS[8][8];
    
    int counter = 0;
    int inner_counter = 0;
    
    while (counter < 8){
        
        while (inner_counter < 8){
            
            std::cin >> CHESS[counter][inner_counter];
            
            inner_counter++;
        }
        
        inner_counter = 0;
        
        counter++;
    }

    counter = 0;

int change_count = 0;

    while (counter < 8){
        
        while (inner_counter < 8){
            
            switch (CHESS[counter][inner_counter]){

                case 'R':
                    
                    change_count = 1;
                    while (((counter + change_count) < 8) && (CHESS[counter + change_count][inner_counter] != 'R') && (CHESS[counter + change_count][inner_counter] != 'B')){

                            CHESS[counter + change_count][inner_counter] = 'A';
                        
                        change_count++;

                    }
                    change_count = 1;
                    while (((counter - change_count) > -1) && (CHESS[counter - change_count][inner_counter] != 'R') && (CHESS[counter - change_count][inner_counter] != 'B')){
                      
                            CHESS[counter - change_count][inner_counter] = 'A';
                    
                        change_count++;

                    }
                    change_count = 1;
                    
                    while (((inner_counter + change_count) < 8) && (CHESS[counter][inner_counter + change_count] != 'R') && (CHESS[counter][inner_counter + change_count] != 'B')){

                        
                            CHESS[counter][inner_counter + change_count] = 'A';
                        
                        change_count++;

                    }
                    change_count = 1;
                    
                    while (((inner_counter - change_count) > -1) && (CHESS[counter][inner_counter - change_count] != 'R') && (CHESS[counter][inner_counter - change_count] != 'B')){

                        
                            CHESS[counter][inner_counter - change_count] = 'A';
                        
                        change_count++;

                    }
                    change_count = 1;
                    
                break;

                case 'B':

                    change_count = 1;
                    while (((counter - change_count) > -1) && ((inner_counter - change_count) > -1) && (CHESS[counter - change_count][inner_counter - change_count] != 'B') && (CHESS[counter - change_count][inner_counter - change_count] != 'R')){
                        // if (((counter - change_count) > -1) && ((inner_counter - change_count) > -1) && (CHESS[counter - change_count][inner_counter - change_count] == '*')){
                            CHESS[counter - change_count][inner_counter - change_count] = 'A';
                    //         std::cout << "change_count - -\n";
                        // }
                        change_count++;


                    }
                    change_count = 1;

                    while (((inner_counter + change_count) < 8) && ((counter + change_count) < 8) && (CHESS[counter + change_count][inner_counter + change_count] != 'B') && (CHESS[counter + change_count][inner_counter + change_count] != 'R')){ 
                        // if (((inner_counter + change_count) < 8) && ((counter + change_count) < 8) && (CHESS[counter + change_count][inner_counter + change_count] == '*')){
                            CHESS[counter + change_count][inner_counter + change_count] = 'A';
                            // std::cout << "change_count + +\n";
                        // }
                        change_count++;
                          

                    }
                    change_count = 1;

                    while (((counter - change_count) > -1) && ((inner_counter + change_count) < 8) && (CHESS[counter - change_count][inner_counter + change_count] != 'B') && (CHESS[counter - change_count][inner_counter + change_count] != 'R')){
                        // if (((counter - change_count) > -1) && ((inner_counter + change_count) < 8) && (CHESS[counter - change_count][inner_counter + change_count] == '*')){
                            CHESS[counter - change_count][inner_counter + change_count] = 'A';
                            // std::cout << "change_count - +\n";
                        // }
                        change_count++;
                        
                        


                    }
                    change_count = 1;

                    while (((counter + change_count) < 8) && ((inner_counter - change_count) > -1) && (CHESS[counter+ change_count][inner_counter - change_count] != 'B') && (CHESS[counter+ change_count][inner_counter - change_count] != 'R')){
                        // if (((counter + change_count) < 8) && ((inner_counter - change_count) > -1) && (CHESS[counter+ change_count][inner_counter - change_count] == '*')) {
                            CHESS[counter + change_count][inner_counter - change_count] = 'A';
                            // std::cout << "change_count + -\n";
                        // }
                        change_count++;
                        
                        


                    }
                    change_count = 1;

                break;

            }
            
            inner_counter++;
        }
        
        inner_counter = 0;
        
        counter++;
    }

    counter = 0;

    unsigned int check_sum = 0;

    while (counter < 8){
        
        while (inner_counter < 8){
            
            if (CHESS[counter][inner_counter] == '*'){

                check_sum++;
            }
            
            // std::cout << CHESS[counter][inner_counter];
            inner_counter++;
        }
        
        inner_counter = 0;
        
        // std::cout << '\n';
        counter++;
    }        

    
    std::cout<< check_sum;

    return 0;
}
